/*
 * ELB
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */

package model

import (
	"encoding/json"
	"errors"
	"github.com/huaweicloud/huaweicloud-sdk-go-v3/core/converter"
	"strings"
)

// 创建监听器的结构体
type CreateListenerV2Req struct {
	// 监听器关联的负载均衡器 ID
	LoadbalancerId string `json:"loadbalancer_id"`
	// 监听器的监听协议
	Protocol CreateListenerV2ReqProtocol `json:"protocol"`
	// 监听器的监听端口。如果监听协议为UDP，端口号不支持4789。
	ProtocolPort int32 `json:"protocol_port"`
	// 监听器所在的项目ID。
	TenantId *string `json:"tenant_id,omitempty"`
	// 监听器名称。
	Name *string `json:"name,omitempty"`
	// 监听器的描述信息
	Description *string `json:"description,omitempty"`
	// 监听器器的管理状态。只支持设定为true，该字段的值无实际意义。
	AdminStateUp *bool `json:"admin_state_up,omitempty"`
	// 监听器的最大连接数。该字段为预留字段，暂未启用。默认为-1。
	ConnectionLimit *int32 `json:"connection_limit,omitempty"`
	// HTTP2功能的开启状态。该字段只有当监听器的协议是TERMINATED_HTTPS时生效。
	Http2Enable *bool `json:"http2_enable,omitempty"`
	// 监听器的默认后端云服务器组ID。当请求没有匹配的转发策略时，转发到默认后端云服务器上处理。当该字段为null时，表示监听器无默认的后端云服务器组。
	DefaultPoolId *string `json:"default_pool_id,omitempty"`
	// 监听器使用的服务器证书ID。当protocol参数为TERMINATED_HTTPS时，为必选字段
	DefaultTlsContainerRef *string `json:"default_tls_container_ref,omitempty"`
	// 监听器使用的CA证书ID。
	ClientCaTlsContainerRef *string `json:"client_ca_tls_container_ref,omitempty"`
	// 监听器使用的SNI证书（带域名的服务器证书）ID的列表。 该字段不为空列表时，SNI特性开启。该字段为空列表时，SNI特性关闭。
	SniContainerRefs *[]string     `json:"sni_container_refs,omitempty"`
	InsertHeaders    *InsertHeader `json:"insert_headers,omitempty"`
	// 监听器使用的安全策略，仅对TERMINATED_HTTPS协议类型的监听器有效，且默认值为tls-1-0。  取值包括：tls-1-0, tls-1-1, tls-1-2, tls-1-2-strict多种安全策略。
	TlsCiphersPolicy *CreateListenerV2ReqTlsCiphersPolicy `json:"tls_ciphers_policy,omitempty"`
}

func (o CreateListenerV2Req) String() string {
	data, _ := json.Marshal(o)
	return strings.Join([]string{"CreateListenerV2Req", string(data)}, " ")
}

type CreateListenerV2ReqProtocol struct {
	value string
}

type CreateListenerV2ReqProtocolEnum struct {
	UDP              CreateListenerV2ReqProtocol
	TCP              CreateListenerV2ReqProtocol
	HTTP             CreateListenerV2ReqProtocol
	TERMINATED_HTTPS CreateListenerV2ReqProtocol
}

func GetCreateListenerV2ReqProtocolEnum() CreateListenerV2ReqProtocolEnum {
	return CreateListenerV2ReqProtocolEnum{
		UDP: CreateListenerV2ReqProtocol{
			value: "UDP",
		},
		TCP: CreateListenerV2ReqProtocol{
			value: "TCP",
		},
		HTTP: CreateListenerV2ReqProtocol{
			value: "HTTP",
		},
		TERMINATED_HTTPS: CreateListenerV2ReqProtocol{
			value: "TERMINATED_HTTPS",
		},
	}
}

func (c CreateListenerV2ReqProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.value)
}

func (c *CreateListenerV2ReqProtocol) UnmarshalJSON(b []byte) error {
	myConverter := converter.StringConverterFactory("string")
	if myConverter != nil {
		val, err := myConverter.CovertStringToInterface(strings.Trim(string(b[:]), "\""))
		if err == nil {
			c.value = val.(string)
			return nil
		}
		return err
	} else {
		return errors.New("convert enum data to string error")
	}
}

type CreateListenerV2ReqTlsCiphersPolicy struct {
	value string
}

type CreateListenerV2ReqTlsCiphersPolicyEnum struct {
	TLS_1_0        CreateListenerV2ReqTlsCiphersPolicy
	TLS_1_1        CreateListenerV2ReqTlsCiphersPolicy
	TLS_1_2        CreateListenerV2ReqTlsCiphersPolicy
	TLS_1_2_STRICT CreateListenerV2ReqTlsCiphersPolicy
}

func GetCreateListenerV2ReqTlsCiphersPolicyEnum() CreateListenerV2ReqTlsCiphersPolicyEnum {
	return CreateListenerV2ReqTlsCiphersPolicyEnum{
		TLS_1_0: CreateListenerV2ReqTlsCiphersPolicy{
			value: "tls-1-0",
		},
		TLS_1_1: CreateListenerV2ReqTlsCiphersPolicy{
			value: " tls-1-1",
		},
		TLS_1_2: CreateListenerV2ReqTlsCiphersPolicy{
			value: " tls-1-2",
		},
		TLS_1_2_STRICT: CreateListenerV2ReqTlsCiphersPolicy{
			value: " tls-1-2-strict",
		},
	}
}

func (c CreateListenerV2ReqTlsCiphersPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.value)
}

func (c *CreateListenerV2ReqTlsCiphersPolicy) UnmarshalJSON(b []byte) error {
	myConverter := converter.StringConverterFactory("string")
	if myConverter != nil {
		val, err := myConverter.CovertStringToInterface(strings.Trim(string(b[:]), "\""))
		if err == nil {
			c.value = val.(string)
			return nil
		}
		return err
	} else {
		return errors.New("convert enum data to string error")
	}
}
