/*
 * ELB
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */

package model

import (
	"encoding/json"
	"errors"
	"github.com/huaweicloud/huaweicloud-sdk-go-v3/core/converter"
	"strings"
)

// 负载均衡器响应体
type LoadbalancerV2Resp struct {
	// 负载均衡器ID
	Id string `json:"id"`
	// 负载均衡器所在的项目ID。
	TenantId string `json:"tenant_id"`
	// 负载均衡器名称。
	Name string `json:"name"`
	// 负载均衡器的描述信息
	Description string `json:"description"`
	// 负载均衡器所在的子网ID。仅支持内网类型。
	VipSubnetId string `json:"vip_subnet_id"`
	// 负载均衡器虚拟IP对应的端口ID
	VipPortId string `json:"vip_port_id"`
	// 负载均衡器的虚拟IP。
	VipAddress string `json:"vip_address"`
	// 负载均衡器关联的监听器ID的列表
	Listeners []ResourceList `json:"listeners"`
	// 负载均衡器关联的后端云服务器组ID的列表。
	Pools []ResourceList `json:"pools"`
	// 负载均衡器的供应者名称。只支持vlb
	Provider string `json:"provider"`
	// 负载均衡器的操作状态
	OperatingStatus LoadbalancerV2RespOperatingStatus `json:"operating_status"`
	// 负载均衡器的配置状态
	ProvisioningStatus LoadbalancerV2RespProvisioningStatus `json:"provisioning_status"`
	// 负载均衡器的管理状态。只支持设定为true，该字段的值无实际意义。
	AdminStateUp bool `json:"admin_state_up"`
	// 负载均衡器的创建时间
	CreatedAt string `json:"created_at"`
	// 负载均衡器的更新时间
	UpdatedAt string `json:"updated_at"`
	// 负载均衡器的企业项目ID。
	EnterpriseProjectId string `json:"enterprise_project_id"`
	// 负载均衡器所在的项目ID。
	ProjectId string `json:"project_id"`
	// 负载均衡器的标签列表
	Tags []string `json:"tags"`
}

func (o LoadbalancerV2Resp) String() string {
	data, _ := json.Marshal(o)
	return strings.Join([]string{"LoadbalancerV2Resp", string(data)}, " ")
}

type LoadbalancerV2RespOperatingStatus struct {
	value string
}

type LoadbalancerV2RespOperatingStatusEnum struct {
	ONLINE     LoadbalancerV2RespOperatingStatus
	OFFLINE    LoadbalancerV2RespOperatingStatus
	DEGRADED   LoadbalancerV2RespOperatingStatus
	DISABLED   LoadbalancerV2RespOperatingStatus
	NO_MONITOR LoadbalancerV2RespOperatingStatus
}

func GetLoadbalancerV2RespOperatingStatusEnum() LoadbalancerV2RespOperatingStatusEnum {
	return LoadbalancerV2RespOperatingStatusEnum{
		ONLINE: LoadbalancerV2RespOperatingStatus{
			value: "ONLINE",
		},
		OFFLINE: LoadbalancerV2RespOperatingStatus{
			value: "OFFLINE",
		},
		DEGRADED: LoadbalancerV2RespOperatingStatus{
			value: "DEGRADED",
		},
		DISABLED: LoadbalancerV2RespOperatingStatus{
			value: "DISABLED",
		},
		NO_MONITOR: LoadbalancerV2RespOperatingStatus{
			value: "NO_MONITOR",
		},
	}
}

func (c LoadbalancerV2RespOperatingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.value)
}

func (c *LoadbalancerV2RespOperatingStatus) UnmarshalJSON(b []byte) error {
	myConverter := converter.StringConverterFactory("string")
	if myConverter != nil {
		val, err := myConverter.CovertStringToInterface(strings.Trim(string(b[:]), "\""))
		if err == nil {
			c.value = val.(string)
			return nil
		}
		return err
	} else {
		return errors.New("convert enum data to string error")
	}
}

type LoadbalancerV2RespProvisioningStatus struct {
	value string
}

type LoadbalancerV2RespProvisioningStatusEnum struct {
	ACTIVE         LoadbalancerV2RespProvisioningStatus
	PENDING_CREATE LoadbalancerV2RespProvisioningStatus
	ERROR          LoadbalancerV2RespProvisioningStatus
}

func GetLoadbalancerV2RespProvisioningStatusEnum() LoadbalancerV2RespProvisioningStatusEnum {
	return LoadbalancerV2RespProvisioningStatusEnum{
		ACTIVE: LoadbalancerV2RespProvisioningStatus{
			value: "ACTIVE",
		},
		PENDING_CREATE: LoadbalancerV2RespProvisioningStatus{
			value: "PENDING_CREATE",
		},
		ERROR: LoadbalancerV2RespProvisioningStatus{
			value: "ERROR",
		},
	}
}

func (c LoadbalancerV2RespProvisioningStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.value)
}

func (c *LoadbalancerV2RespProvisioningStatus) UnmarshalJSON(b []byte) error {
	myConverter := converter.StringConverterFactory("string")
	if myConverter != nil {
		val, err := myConverter.CovertStringToInterface(strings.Trim(string(b[:]), "\""))
		if err == nil {
			c.value = val.(string)
			return nil
		}
		return err
	} else {
		return errors.New("convert enum data to string error")
	}
}
